data("gaussian.test")
install.packages("bnlearn")
library(bnlearn)
data("gaussian.test")
colnames(gaussian.test)
for (i in 1:dim(gaussian.test)[2])
{
print(range(gaussian.test[, i])) # Print range.
print(quantile(gaussian.test[,i])[c(2,4)]) # Prints the 25% and 75% quantile.
}
View(gaussian.test)
subA <- gaussian.test[, "A" <=4 && "A" >=3]
View(subA)
subA <- gaussian.test[, "A" <=4]
View(subA)
subA <- gaussian.test[, "A" < 4]
subA <- gaussian.test[, "A"]
subA <- gaussian.test[, "A"] >= 4
subA <- gaussian.test[, "A" < 4]
View(subA)
subA <- gaussian.test[, "A"]
subA < 4
sum(subA <=4 & subA >= 3)
subA <=4 & subA >= 3
subA <- gaussian.test[, "A"] >= 3
subA <- (gaussian.test[, "A"] >= 3)
subA <- print(gaussian.test[, "A"] >= 3)
subA <- print(gaussian.test[, "A"])
subA<= 4
subA <- subA[subA <4]
subA
subA <- subA[< 4]
subA <- print(gaussian.test[, "A"])
subA
subA <- subA < 4
subA <- (gaussian.test[, "A"] >= 3) & (gaussian.test[, "B"] <= 4)
head(subA)
?where
?which
which(subA == T)
subA <- (gaussian.test[, "A"] >= 3) & (gaussian.test[, "A"] <= 4)
trueValues <- which(subA == T)
subA[trueValues]
subA[104]
gaussian.test$A[trueValues]
?sample
gaussian.test[, gaussian.test$A < 4]
gaussian.test[, gaussian.test < 4]
sample(gaussian.test, 50)
sample(gaussian.test, 50, replace = F)
sample(gaussian.test, 50, replace = F)
gaussian.test[sample(50, replace = F)]
gaussian.test[sample(50, replace = F), ]
colMeans(gaussian.test[sample(5000, replace = F), ])
scale(gaussian.test)
?data.frame
?rep
a <- factor(rep("low", 50), rep("high", 50), levels = "low", "high")
a <- factor(rep("low", 50), rep("high", 50), levels = c("low", "high"))
a <- factor(c(rep("low", 50), rep("high", 50)), levels = c("low", "high"))
head(a)
?seq
b <- factor(rep(c(rep("good", 50), rep("bad", 50)), 2, levels = c("good", "bad"))
b <- factor(rep(c(rep("good", 50), rep("bad", 50)), 2, levels = c("good", "bad")))
b <- factor(rep(c(rep("good", 50), rep("bad", 50)), 2, levels = c("good", "bad")))
head(b)
b
?rnorm
df <- data.frame(a, b, c = c(rnorm(50, mean = 2, sd = 2), rnorm(50, mean = 4, sd = 1)))
View(df)
?by
by[df[, "c"], INDICES = df[, c("a", "b")], FUN = sd]
sd(df[1:50, "c"])
sd(df[51:100], "c")
View(df)
a <- factor(c(rep("low", 50), rep("high", 50)), levels = c("low", "high"))
b <- factor(rep(c(rep("good", 25), rep("bad", 25)), 2, levels = c("good", "bad")))
df <- data.frame(a, b, c = c(rnorm(50, mean = 2, sd = 2),
rnorm(50, mean = 4, sd = 1)))
by[df[, "c"], INDICES = df[, c("a", "b")], FUN = sd]
by[df[, c("a", "b")], INDICES = df[, "c"], FUN = sd]
View(df)
data("marks")
rm(df)
rm(gaussian.test)
data("marks")
str(marks)
View(marks)
ug = empty.graph(names(marks))
ug
names(marks)
str(ug)
arcs(ug, ignore.cycles = T) = matrix(c('MECH', 'VECT', 'MECH', 'ALG', 'VECT', 'MECH',
'VECT', 'ALG', 'ALG', 'MECH', 'ALG', 'VECT',
'ALG', 'ANL', 'ALG', 'STAT', 'ANL', 'ALG',
'ANL', 'STAT', 'STAT', 'ALG', 'STAT', 'ANL'),
ncol = 2, byrow = T, dimnames = list(c(), c("from", "to")))
?arcs
arcs(ug) = matrix(c('MECH', 'VECT', 'MECH', 'ALG', 'VECT', 'MECH',
'VECT', 'ALG', 'ALG', 'MECH', 'ALG', 'VECT',
'ALG', 'ANL', 'ALG', 'STAT', 'ANL', 'ALG',
'ANL', 'STAT', 'STAT', 'ALG', 'STAT', 'ANL'),
ncol = 2, byrow = T, dimnames = list(c(), c("from", "to")))
arcmatrix <- matrix(c('MECH', 'VECT', 'MECH', 'ALG', 'VECT', 'MECH',
'VECT', 'ALG', 'ALG', 'MECH', 'ALG', 'VECT',
'ALG', 'ANL', 'ALG', 'STAT', 'ANL', 'ALG',
'ANL', 'STAT', 'STAT', 'ALG', 'STAT', 'ANL'),
ncol = 2, byrow = T, dimnames = list(c(), c("from", "to")))
View(arcmatrix)
arcmatrix <- matrix(c('MECH', 'VECT', 'MECH', 'ALG', 'VECT', 'MECH',
'VECT', 'ALG', 'ALG', 'MECH', 'ALG', 'VECT',
'ALG', 'ANL', 'ALG', 'STAT', 'ANL', 'ALG',
'ANL', 'STAT', 'STAT', 'ALG', 'STAT', 'ANL'),
ncol = 2, byrow = T, dimnames = list(c(), c("from", "to")))
View(arcmatrix)
ug
ug
dag = empty.graph(names(marks))
dag
arcs(dag) = matrix(c('VECT', 'MECH', 'ALG', 'MECH', 'ALG', 'VECT',
'ANL', 'ALG', 'STAT', 'ALG', 'STAT', 'ANL'),
ncol = 2, byrow = T, dimnames = list(c(), c("from", "to")))
dag
dagarcmatrix <- matrix(c('VECT', 'MECH', 'ALG', 'MECH', 'ALG', 'VECT',
'ANL', 'ALG', 'STAT', 'ALG', 'STAT', 'ANL'),
ncol = 2, byrow = T, dimnames = list(c(), c("from", "to")))
View(dagarcmatrix)
View(arcmatrix)
mat <- matrix(c(0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0),
nrow = 5, dimnames = list(nodes(dag), nodes(dag)))
View(mat)
dag2 <- empty.graph(nodes(dag))
?amat
amat(dag2) <- mat
View(marks)
all.equal(dag, dag2)
dag2
dag3 <- empty.graph(nodes(dag))
dag3 <- set.arc(dag3, 'VECT', 'MECH')
dag3 <- set.arc(dag3, 'ALG', 'MECH')
dag3 <- set.arc(dag3, 'ALG', 'MECH')
dag3 <- set.arc(dag3, 'VECT', 'MECH')
dag3 <- set.arc(dag3, 'ALG', 'MECH')
dag3 <- set.arc(dag3, 'ALG', 'VECT')
dag3 <- set.arc(dag3, 'ANL', 'ALG')
dag3 <- set.arc(dag3, 'STAT', 'ALG')
dag3 <- set.arc(dag3, 'STAT', 'ANL')
# Check equivalence.
all.equal(dag, dag3)
?moral
